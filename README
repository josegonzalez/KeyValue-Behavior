KeyValue Behavior

Installation

   Save the KeyValueBehavior.php file to your app/Model/Behavior/ folder.

Example of usage

   Lets say I have a table for five fields:

	id
	created
	key
	value
	user_id

Now lets say I wanted to store many different types of keys so there is not a locked down schema we might build a template form like so:


	<?php
		echo $this->Form->create('Measurement');
		echo $this->Form->input('weight');
		echo $this->Form->input('hips');
		echo $this->Form->input('waist');
		echo $this->Form->end(__('Submit'));
	?>

And I want validation on those three inputs so my model might look like:

	<?php

	/**
	 * Measurement Model
	 *
	 * @property User $User
	 */
	class Measurement extends AppModel {

		/**
		 * Tell this model how to behave
		 * 
		 * @var array 
		 */
		public $actsAs = array('KeyValue');

		/**
		 * Validation rules
		 *
		 * @var array
		 */
		public $validate = array(
			'weight' => array(
				'numeric' => array(
					'rule' => array('numeric'),
					'message' => 'You must enter a weight'
				)
			),
                        'waist' => array(
                                'numeric' => array(
                                        'rule' => array('numeric'),
                                        'message' => 'You must enter a value for waist'
                                )
                        ),
                        'hips' => array(
                                'numeric' => array(
                                        'rule' => array('numeric'),
                                        'message' => 'You must enter a value for hips'
                                )
                        ),
		);


Configurations:

	  - uniqueKeys: If this is true it run a deleteAll on the data to save minus the value
	  - fields: This is a single array that lets us know what field to use for the key and for the value

How it works

It will look over the data you tell it to save and it will pick out the fields that actual fields in your database like user_id for example, and it will generate a new record for every field that does not exist in your database table.

so if I said ->save(array('Recipe' => array('hips' => '20', 'weight' => '20', 'user_id' => 2)); That would generate two records one for hips and one for weight but they would both contain the same user_id.
